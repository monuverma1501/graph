// work on tree 


#include<bits/stdc++.h>
using namespace std;

int dist[100];

void dfs(int node,vector<int> adj[],vector<int> &vis,int d){
     vis[node]=1;
     dist[node]=d;
     for(auto it:adj[node]){
         if(!vis[it])
            dfs(it,adj,vis,1+dist[node]);
     }
}

int main(){
	int n,m;
	cin>>n>>m;
	vector<int> adj[n+1];
	vector<int> vis(n+1,0);
	for(int i=0;i<m;i++)
	{
		int u,v;
		cin>>u>>v;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	//source node is 1 and distance from node 1 to node 1 is 0
	dfs(1,adj,vis,0);
	for(int i=1;i<=n;i++)
		cout<<"distance form node 1  to "<<i<<" = "<<dist[i]<<endl;
}





// example input
7 6   // 7 no of nodes and 6 are edges 
1 2
1 3
2 4
3 5
3 6
6 7
// example output 
distance form node 1  to 1 = 0
distance form node 1  to 2 = 1
distance form node 1  to 3 = 1
distance form node 1  to 4 = 2
distance form node 1  to 5 = 2
distance form node 1  to 6 = 2
distance form node 1  to 7 = 3

